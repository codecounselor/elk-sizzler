# We must extend the pipeline for mysql to aggregate multiple log entries that
# represent a single deadlock.

# 2020-01-27T17:20:35.463747Z 54 [Note] InnoDB: Transactions deadlock detected, dumping detailed information.
# 2020-01-27T17:20:35.464942Z 54 [Note] InnoDB:
# 2020-01-27T17:20:35.465266Z 54 [Note] InnoDB: *** (1) WAITING FOR THIS LOCK TO BE GRANTED:
# 2020-01-27T17:20:35.469270Z 54 [Note] InnoDB: *** (2) TRANSACTION:
# 2020-01-27T17:20:35.469384Z 54 [Note] InnoDB: *** (2) HOLDS THE LOCK(S):
# 2020-01-27T17:20:35.471165Z 54 [Note] InnoDB: *** (2) WAITING FOR THIS LOCK TO BE GRANTED:
# 2020-01-27T17:20:35.473132Z 54 [Note] InnoDB: *** WE ROLL BACK TRANSACTION (1)

input {
  beats {
    port => 5044
  }
}

filter {
  grok {
    match => {
      "message" => [
        "%{DATA:mysql.timestamp} %{NUMBER:mysql.thread_id:long} \[%{DATA:log.level}\] %{GREEDYDATA:mysql.message}",
        "%{LOCALDATETIME:mysql.timestamp} (\\[%{DATA:log.level}\\] )?%{GREEDYDATA:mysql.message}",
        "%{GREEDYDATA:mysql.message}"
      ]
    }
    pattern_definitions => {
      "LOCALDATETIME" => "[0-9]+ %{TIME}"
    }
  }

  date {
    match => ["mysql.timestamp", "ISO8601", "yyMMdd H:m:s"]
  }

  mutate {
    copy => {
      "@timestamp" => "event.created"
    }
  }

  # Start of a deadlock, we don't really know if the last log entry will
  # be in order so we just rely on a timeout
  if [mysql.message] =~ /Transactions deadlock detected/ {
      aggregate {
        task_id => "%{[mysql.thread_id]}"
        add_tag => ["deadlock"]
        code => "
          map['mysql.message'] = event.get('mysql.message')
          map['mysql.thread_id'] = event.get('mysql.thread_id')
          map['meta'] = event.get('@metadata')
          map['agent'] = event.get('agent')
          map['host'] = event.get('host')
          map['log'] = event.get('log')
        "
        map_action => "create"
        timeout => 2
        timeout_timestamp_field => "@timestamp"
        push_map_as_event_on_timeout => true
    }
  }
  aggregate {
    task_id => "%{[mysql.thread_id]}"
    code => '
      map["deadlock"] ||= ""
      map["deadlock"] += event.get("mysql.message") + "\n"
      event.cancel
    '
     # Only aggregates if there was a recent deadlock for this same threadId
     map_action => "update"
  }
}

output {
  elasticsearch {
    hosts => ["localhost:9200"]
    index => "filebeat-mysql-%{+YYYY.MM.dd}"
  }
}
